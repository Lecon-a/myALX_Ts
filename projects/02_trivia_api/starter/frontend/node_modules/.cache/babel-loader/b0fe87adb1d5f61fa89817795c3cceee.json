{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\Project\\\\projects\\\\02_trivia_api\\\\starter\\\\frontend\\\\src\\\\components\\\\QuizView.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../stylesheets/QuizView.css';\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getUsername = () => {\n      let username = window.prompt('Please, enter your name to track your intelligency');\n      alert(username);\n\n      if (username != null) {\n        $.ajax({\n          url: \"/users\",\n          //TODO: update request URL\n          type: \"POST\",\n          data: JSON.stringify({\n            username: username\n          }),\n          success: result => {\n            this.renderPlay();\n          },\n          error: error => {\n            alert('Unable to save your name. Please try again');\n          }\n        });\n      }\n    };\n\n    this.selectCategory = ({\n      type,\n      id = 0\n    }) => {\n      this.setState({\n        quizCategory: {\n          type,\n          id\n        }\n      }, this.getNextQuestion);\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.getNextQuestion = () => {\n      const previousQuestions = [...this.state.previousQuestions];\n\n      if (this.state.currentQuestion.id) {\n        previousQuestions.push(this.state.currentQuestion.id);\n      }\n\n      $.ajax({\n        url: '/quizzes',\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          previous_questions: previousQuestions,\n          quiz_category: this.state.quizCategory\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            showAnswer: false,\n            previousQuestions: previousQuestions,\n            currentQuestion: result.question,\n            guess: '',\n            forceEnd: result.question ? false : true\n          });\n        },\n        error: error => {\n          alert('Unable to load question. Please try your request again');\n        }\n      });\n    };\n\n    this.submitGuess = event => {\n      event.preventDefault();\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      const evaluate = this.evaluateAnswer();\n      this.setState({\n        numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n        showAnswer: true\n      });\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n      });\n    };\n\n    this.evaluateAnswer = () => {\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n      return answerArray.every(el => formatGuess.includes(el));\n    };\n\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: {},\n      numCorrect: 0,\n      currentQuestion: {},\n      username: '',\n      guess: '',\n      forceEnd: false\n    };\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: \"/categories\",\n      //TODO: update request URL\n      type: \"GET\",\n      success: result => {\n        this.setState({\n          categories: result.categories\n        });\n      },\n      error: error => {\n        alert('Unable to load categories. Please try your request again');\n      }\n    });\n  }\n\n  renderPrePlay() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"choose-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Choose Category\"), React.createElement(\"div\", {\n      className: \"category-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"play-category\",\n      onClick: this.selectCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"ALL\"), Object.keys(this.state.categories).map(id => {\n      return React.createElement(\"div\", {\n        key: id,\n        value: id,\n        className: \"play-category\",\n        onClick: () => this.selectCategory({\n          type: this.state.categories[id],\n          id\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, this.state.categories[id]);\n    })));\n  }\n\n  renderFinalScore() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"final-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \" Your Final Score is \", this.state.numCorrect), React.createElement(\"div\", {\n      className: \"play-again button\",\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \" Play Again? \"));\n  }\n\n  renderCorrectAnswer() {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n    const evaluate = this.evaluateAnswer();\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"div\", {\n      className: \"\".concat(evaluate ? 'correct' : 'wrong'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, evaluate ? \"You were correct!\" : \"You were incorrect\"), React.createElement(\"div\", {\n      className: \"quiz-answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, this.state.currentQuestion.answer), React.createElement(\"div\", {\n      className: \"next-question button\",\n      onClick: this.getNextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \" Next Question \"));\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd ? this.renderFinalScore() : this.state.showAnswer ? this.renderCorrectAnswer() : React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"form\", {\n      onSubmit: this.submitGuess,\n      className: \"guess-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"guess\",\n      className: \"guess-input\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"submit-guess button\",\n      type: \"submit\",\n      value: \"Submit Answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    })));\n  }\n\n  render() {\n    return this.state.quizCategory ? this.getUsername() : this.renderPrePlay();\n  }\n\n}\n\nexport default QuizView;","map":{"version":3,"sources":["C:\\Users\\DELL\\Desktop\\Project\\projects\\02_trivia_api\\starter\\frontend\\src\\components\\QuizView.js"],"names":["React","Component","$","questionsPerPlay","QuizView","constructor","props","getUsername","username","window","prompt","alert","ajax","url","type","data","JSON","stringify","success","result","renderPlay","error","selectCategory","id","setState","quizCategory","getNextQuestion","handleChange","event","target","name","value","previousQuestions","state","currentQuestion","push","dataType","contentType","previous_questions","quiz_category","xhrFields","withCredentials","crossDomain","showAnswer","question","guess","forceEnd","submitGuess","preventDefault","formatGuess","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","answerArray","answer","split","every","el","includes","categories","componentDidMount","renderPrePlay","Object","keys","map","renderFinalScore","renderCorrectAnswer","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\n\nimport '../stylesheets/QuizView.css';\n\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        categories: {},\n        numCorrect: 0,\n        currentQuestion: {},\n        username: '',\n        guess: '',\n        forceEnd: false\n    }\n  }\n\n  componentDidMount(){\n    $.ajax({\n      url: `/categories`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({ categories: result.categories })\n      },\n      error: (error) => {\n        alert('Unable to load categories. Please try your request again')\n      }\n    })\n  }\n\n  getUsername = () => {\n    let username = window.prompt('Please, enter your name to track your intelligency')\n    alert(username)\n    if(username != null) {\n      $.ajax({\n        url: `/users`, //TODO: update request URL\n        type: \"POST\",\n        data: JSON.stringify({\n          username: username\n        }),\n        success: (result) => {\n          this.renderPlay();\n        },\n        error: (error) => {\n          alert('Unable to save your name. Please try again')\n        }\n      }) \n    }\n  }\n\n\n  selectCategory = ({type, id=0}) => {\n    this.setState({quizCategory: {type, id}}, this.getNextQuestion)\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  getNextQuestion = () => {\n    const previousQuestions = [...this.state.previousQuestions]\n    if(this.state.currentQuestion.id) { previousQuestions.push(this.state.currentQuestion.id) }\n\n    $.ajax({\n      url: '/quizzes', //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        previous_questions: previousQuestions,\n        quiz_category: this.state.quizCategory\n      }),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          showAnswer: false,\n          previousQuestions: previousQuestions,\n          currentQuestion: result.question,\n          guess: '',\n          forceEnd: result.question ? false : true\n        })\n      },\n      error: (error) => {\n        alert('Unable to load question. Please try your request again')\n      }\n    })\n  }\n\n  submitGuess = (event) => {\n    event.preventDefault();\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    const evaluate =  this.evaluateAnswer()\n    this.setState({\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n      showAnswer: true,\n    })\n  }\n\n  restartGame = () => {\n    this.setState({\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    })\n  }\n\n  renderPrePlay(){\n      return (\n          <div className=\"quiz-play-holder\">\n              <div className=\"choose-header\">Choose Category</div>\n              <div className=\"category-holder\">\n                  <div className=\"play-category\" onClick={this.selectCategory}>ALL</div>\n                  {Object.keys(this.state.categories).map(id => {\n                  return (\n                    <div\n                      key={id}\n                      value={id}\n                      className=\"play-category\"\n                      onClick={() => this.selectCategory({type:this.state.categories[id], id})}>\n                      {this.state.categories[id]}\n                    </div>\n                  )\n                })}\n              </div>\n          </div>\n      )\n  }\n\n  renderFinalScore(){\n    return(\n      <div className=\"quiz-play-holder\">\n        <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\n        <div className=\"play-again button\" onClick={this.restartGame}> Play Again? </div>\n      </div>\n    )\n  }\n\n  evaluateAnswer = () => {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n    return answerArray.every(el => formatGuess.includes(el));\n  }\n\n  renderCorrectAnswer(){\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    const evaluate =  this.evaluateAnswer()\n    return(\n      <div className=\"quiz-play-holder\">\n        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\n        <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question </div>\n      </div>\n    )\n  }\n\n  renderPlay(){\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd\n      ? this.renderFinalScore()\n      : this.state.showAnswer\n        ? this.renderCorrectAnswer()\n        : (\n          \n          <div className=\"quiz-play-holder\">\n            <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n            <form onSubmit={this.submitGuess} className=\"guess-form\">\n              <input type=\"text\" name=\"guess\" className=\"guess-input\" onChange={this.handleChange}/>\n              <input className=\"submit-guess button\" type=\"submit\" value=\"Submit Answer\" />\n            </form>\n              \n          </div>\n        )\n  }\n\n\n  render() {\n    return this.state.quizCategory\n        ? this.getUsername()\n        : this.renderPrePlay()\n  }\n}\n\nexport default QuizView;\n"]},"metadata":{},"sourceType":"module"}