{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\Project\\\\projects\\\\02_trivia_api\\\\starter\\\\frontend\\\\src\\\\components\\\\QuizView.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../stylesheets/QuizView.css';\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getUsername = e => {\n      e.preventDefault();\n      document.querySelector(\".user-btn\").disabled = true;\n      document.querySelector(\".input-username\").disabled = true;\n      document.querySelector(\".input-username\").value = \"\";\n      $.ajax({\n        url: \"/users\",\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          username: this.state.username,\n          quiz_category: this.state.quizCategory\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          // alert('Create successfully')\n          document.getElementById(\"guess-input\").style.display = \"block\";\n        },\n        error: error => {\n          alert('Unable to save your name. Please try again');\n        }\n      });\n    };\n\n    this.selectCategory = ({\n      type,\n      id = 0\n    }) => {\n      this.setState({\n        quizCategory: {\n          type,\n          id\n        }\n      }, this.getNextQuestion);\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.getNextQuestion = () => {\n      const previousQuestions = [...this.state.previousQuestions];\n\n      if (this.state.currentQuestion.id) {\n        previousQuestions.push(this.state.currentQuestion.id);\n      }\n\n      $.ajax({\n        url: '/quizzes',\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          previous_questions: previousQuestions,\n          quiz_category: this.state.quizCategory\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            showAnswer: false,\n            previousQuestions: previousQuestions,\n            currentQuestion: result.question,\n            guess: '',\n            forceEnd: result.question ? false : true\n          });\n        },\n        error: error => {\n          alert('Unable to load question. Please try your request again');\n        }\n      });\n    };\n\n    this.submitGuess = event => {\n      event.preventDefault();\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      const evaluate = this.evaluateAnswer();\n      this.setState({\n        numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n        showAnswer: true\n      });\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        forceEnd: false\n      });\n    };\n\n    this.evaluateAnswer = () => {\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n      return answerArray.every(el => formatGuess.includes(el));\n    };\n\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: {},\n      numCorrect: 0,\n      currentQuestion: {},\n      user: {},\n      username: '',\n      guess: '',\n      forceEnd: false\n    };\n  }\n\n  componentDidMount() {\n    $.ajax({\n      url: \"/categories\",\n      //TODO: update request URL\n      type: \"GET\",\n      success: result => {\n        this.setState({\n          categories: result.categories\n        });\n      },\n      error: error => {\n        alert('Unable to load categories. Please try your request again');\n      }\n    });\n  } // setDisplay = () => {\n  //   document.querySelector(\".question-block\").style.display = \"none\";\n  //   document.getElementById(\"user-info\").style.display = \"block\";\n  // }\n\n\n  renderPrePlay() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"choose-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Choose Category\"), React.createElement(\"div\", {\n      className: \"category-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"play-category\",\n      onClick: this.selectCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"ALL\"), Object.keys(this.state.categories).map(id => {\n      return React.createElement(\"div\", {\n        key: id,\n        value: id,\n        className: \"play-category\",\n        onClick: () => this.selectCategory({\n          type: this.state.categories[id],\n          id\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, this.state.categories[id]);\n    })));\n  }\n\n  renderFinalScore() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"final-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \" Your Final Score is \", this.state.numCorrect), React.createElement(\"div\", {\n      className: \"play-again button\",\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \" Play Again? \"));\n  }\n\n  renderCorrectAnswer() {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n    const evaluate = this.evaluateAnswer();\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"div\", {\n      className: \"\".concat(evaluate ? 'correct' : 'wrong'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, evaluate ? \"You were correct!\" : \"You were incorrect\"), React.createElement(\"div\", {\n      className: \"quiz-answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, this.state.currentQuestion.answer), React.createElement(\"div\", {\n      className: \"next-question button\",\n      onClick: this.getNextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \" Next Question \"));\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd ? this.renderFinalScore() : this.state.showAnswer ? this.renderCorrectAnswer() : React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"user-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"form-view\",\n      id: \"add-username-form\",\n      onSubmit: this.getUsername,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"username\",\n      className: \"input-username\",\n      placeholder: \"Please, enter your name here.\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      className: \"button user-btn\",\n      value: \"OK\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"question-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"form\", {\n      onSubmit: this.submitGuess,\n      className: \"guess-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"guess\",\n      className: \"guess-input\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"submit-guess button\",\n      type: \"submit\",\n      value: \"Submit Answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204\n      },\n      __self: this\n    }))));\n  }\n\n  render() {\n    return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\n  }\n\n}\n\nexport default QuizView;","map":{"version":3,"sources":["C:\\Users\\DELL\\Desktop\\Project\\projects\\02_trivia_api\\starter\\frontend\\src\\components\\QuizView.js"],"names":["React","Component","$","questionsPerPlay","QuizView","constructor","props","getUsername","e","preventDefault","document","querySelector","disabled","value","ajax","url","type","dataType","contentType","data","JSON","stringify","username","state","quiz_category","quizCategory","xhrFields","withCredentials","crossDomain","success","result","getElementById","style","display","error","alert","selectCategory","id","setState","getNextQuestion","handleChange","event","target","name","previousQuestions","currentQuestion","push","previous_questions","showAnswer","question","guess","forceEnd","submitGuess","formatGuess","replace","toLowerCase","evaluate","evaluateAnswer","numCorrect","restartGame","answerArray","answer","split","every","el","includes","categories","user","componentDidMount","renderPrePlay","Object","keys","map","renderFinalScore","renderCorrectAnswer","renderPlay","length","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\n\nimport '../stylesheets/QuizView.css';\n\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        categories: {},\n        numCorrect: 0,\n        currentQuestion: {},\n        user: {},\n        username: '',\n        guess: '',\n        forceEnd: false\n    }\n  }\n\n  componentDidMount(){\n    $.ajax({\n      url: `/categories`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({ categories: result.categories })\n      },\n      error: (error) => {\n        alert('Unable to load categories. Please try your request again')\n      }\n    })\n  }\n\n  // setDisplay = () => {\n  //   document.querySelector(\".question-block\").style.display = \"none\";\n  //   document.getElementById(\"user-info\").style.display = \"block\";\n  // }\n\n  getUsername = (e) => {\n    e.preventDefault();\n    document.querySelector(\".user-btn\").disabled = true;\n    document.querySelector(\".input-username\").disabled = true;\n    document.querySelector(\".input-username\").value = \"\";\n      $.ajax({\n        url: `/users`, //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          username: this.state.username,\n          quiz_category: this.state.quizCategory\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: (result) => {\n          // alert('Create successfully')\n          document.getElementById(\"guess-input\").style.display = \"block\";\n        },\n        error: (error) => {\n          alert('Unable to save your name. Please try again')\n        }\n      }) \n    \n  }\n\n\n  selectCategory = ({type, id=0}) => {\n    this.setState({quizCategory: {type, id}}, this.getNextQuestion)\n  }\n\n  handleChange = (event) => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  getNextQuestion = () => {\n    const previousQuestions = [...this.state.previousQuestions]\n    if(this.state.currentQuestion.id) { previousQuestions.push(this.state.currentQuestion.id) }\n\n    $.ajax({\n      url: '/quizzes', //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        previous_questions: previousQuestions,\n        quiz_category: this.state.quizCategory\n      }),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          showAnswer: false,\n          previousQuestions: previousQuestions,\n          currentQuestion: result.question,\n          guess: '',\n          forceEnd: result.question ? false : true\n        })\n      },\n      error: (error) => {\n        alert('Unable to load question. Please try your request again')\n      }\n    })\n  }\n\n  submitGuess = (event) => {\n    event.preventDefault();\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    const evaluate =  this.evaluateAnswer()\n    this.setState({\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n      showAnswer: true,\n    })\n  }\n\n  restartGame = () => {\n    this.setState({\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      forceEnd: false\n    })\n  }\n\n  renderPrePlay(){\n      return (\n          <div className=\"quiz-play-holder\">\n              <div className=\"choose-header\">Choose Category</div>\n              <div className=\"category-holder\">\n                  <div className=\"play-category\" onClick={this.selectCategory}>ALL</div>\n                  {Object.keys(this.state.categories).map(id => {\n                  return (\n                    <div\n                      key={id}\n                      value={id}\n                      className=\"play-category\"\n                      onClick={() => this.selectCategory({type:this.state.categories[id], id})}>\n                      {this.state.categories[id]}\n                    </div>\n                  )\n                })}\n              </div>\n          </div>\n      )\n  }\n\n  renderFinalScore(){\n    return(\n      <div className=\"quiz-play-holder\">\n        <div className=\"final-header\"> Your Final Score is {this.state.numCorrect}</div>\n        <div className=\"play-again button\" onClick={this.restartGame}> Play Again? </div>\n      </div>\n    )\n  }\n\n  evaluateAnswer = () => {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n    return answerArray.every(el => formatGuess.includes(el));\n  }\n\n  renderCorrectAnswer(){\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g,\"\").toLowerCase()\n    const evaluate =  this.evaluateAnswer()\n    return(\n      <div className=\"quiz-play-holder\">\n        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\n        <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question </div>\n      </div>\n    )\n  }\n\n  renderPlay(){\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd\n      ? this.renderFinalScore()\n      : this.state.showAnswer\n        ? this.renderCorrectAnswer()\n        : (\n          <div className=\"quiz-play-holder\">\n            <div id=\"user-info\">\n              <form className=\"form-view\" id=\"add-username-form\" onSubmit={this.getUsername}>\n                <label>\n                  <input type=\"text\" name=\"username\" className='input-username' placeholder='Please, enter your name here.' onChange={this.handleChange}/>\n                </label>\n                <input type=\"submit\" className=\"button user-btn\" value=\"OK\" />\n              </form>\n            </div>\n            <div className=\"question-block\">\n              <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n              <form onSubmit={this.submitGuess} className=\"guess-form\">\n                <input type=\"text\" name=\"guess\" className=\"guess-input\" onChange={this.handleChange}/>\n                <input className=\"submit-guess button\" type=\"submit\" value=\"Submit Answer\" />\n              </form> \n            </div>\n          </div>\n        )\n  }\n\n\n  render() {\n    return this.state.quizCategory\n        ? this.renderPlay()\n        : this.renderPrePlay()\n  }\n}\n\nexport default QuizView;\n"]},"metadata":{},"sourceType":"module"}