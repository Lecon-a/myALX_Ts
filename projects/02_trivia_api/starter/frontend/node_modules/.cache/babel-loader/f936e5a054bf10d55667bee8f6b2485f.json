{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\Project\\\\projects\\\\02_trivia_api\\\\starter\\\\frontend\\\\src\\\\components\\\\QuizView.js\";\nimport React, { Component } from 'react';\nimport $ from 'jquery';\nimport '../stylesheets/QuizView.css';\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setDisabled = () => {\n      document.getElementById(\"guess_input\").disabled = true;\n      document.getElementById(\"guess_btn\").disabled = true;\n    };\n\n    this.removeDisabled = () => {\n      document.getElementById(\"guess_input\").disabled = false;\n      document.getElementById(\"guess_btn\").disabled = false;\n    };\n\n    this.getUsername = e => {\n      e.preventDefault();\n      $.ajax({\n        url: \"/users\",\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          user_name: this.state.username,\n          categoryType: this.state.quizCategory\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          if (result.userExit) {}\n\n          alert('Created successfully! Go ahead and enjoy your play.');\n          this.setState({\n            user_id: result.user_id\n          });\n          document.querySelector(\".user-btn\").disabled = true;\n          document.querySelector(\".input-username\").disabled = true;\n        },\n        error: error => {\n          alert('Unable to save your name. Please try again');\n          document.querySelector(\".user-btn\").disabled = false;\n          document.querySelector(\".input-username\").disabled = false;\n        }\n      });\n    };\n\n    this.selectCategory = ({\n      type,\n      id = 0\n    }) => {\n      this.setState({\n        quizCategory: {\n          type,\n          id\n        }\n      }, this.getNextQuestion);\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.getNextQuestion = () => {\n      const previousQuestions = [...this.state.previousQuestions];\n\n      if (this.state.currentQuestion.id) {\n        previousQuestions.push(this.state.currentQuestion.id);\n      }\n\n      $.ajax({\n        url: '/quizzes',\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          previous_questions: previousQuestions,\n          quiz_category: this.state.quizCategory\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            showAnswer: false,\n            previousQuestions: previousQuestions,\n            currentQuestion: result.question,\n            guess: '',\n            forceEnd: result.question ? false : true\n          });\n          this.updateUserScore(this.state.user_id);\n        },\n        error: error => {\n          alert('Unable to load question. Please try your request again');\n        }\n      });\n    };\n\n    this.updateUserScore = user_id => {\n      $.ajax({\n        url: \"/scores/\".concat(user_id),\n        //TODO: update request URL\n        type: \"PATCH\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          score: this.state.numCorrect\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          // alert('Score successfully updated.')\n          this.setState({\n            username: result.user_name\n          });\n        },\n        error: error => {\n          if (this.state.previousQuestions.length !== 0) {\n            alert('Unable to update user\\'s score.');\n          }\n        }\n      });\n    };\n\n    this.submitGuess = event => {\n      event.preventDefault();\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      const evaluate = this.evaluateAnswer();\n      this.setState({\n        numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n        showAnswer: true\n      });\n    };\n\n    this.restartGame = () => {\n      this.setState({\n        quizCategory: null,\n        previousQuestions: [],\n        showAnswer: false,\n        numCorrect: 0,\n        currentQuestion: {},\n        guess: '',\n        username: \"\",\n        user_id: 0,\n        forceEnd: false\n      });\n    };\n\n    this.evaluateAnswer = () => {\n      const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n      const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n      return answerArray.every(el => formatGuess.includes(el));\n    };\n\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: {},\n      numCorrect: 0,\n      currentQuestion: {},\n      username: '',\n      user_id: 0,\n      guess: '',\n      forceEnd: false\n    };\n  }\n\n  componentDidMount() {\n    // this.setDisabled()\n    $.ajax({\n      url: \"/categories\",\n      //TODO: update request URL\n      type: \"GET\",\n      success: result => {\n        this.setState({\n          categories: result.categories\n        });\n      },\n      error: error => {\n        alert('Unable to load categories. Please try your request again');\n      }\n    });\n  }\n\n  renderPrePlay() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"choose-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Choose Category\"), React.createElement(\"div\", {\n      className: \"category-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"play-category\",\n      onClick: this.selectCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"ALL\"), Object.keys(this.state.categories).map(id => {\n      return React.createElement(\"div\", {\n        key: id,\n        value: id,\n        className: \"play-category\",\n        onClick: () => this.selectCategory({\n          type: this.state.categories[id],\n          id\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, this.state.categories[id]);\n    })));\n  }\n\n  renderFinalScore() {\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"final-header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \" \", \"\".concat(this.state.username ? this.state.username.toLocaleUpperCase() + ', ' : \"\"), \"Your Final Score is \", this.state.numCorrect), React.createElement(\"div\", {\n      className: \"play-again button\",\n      onClick: this.restartGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, \" Play Again? \"));\n  }\n\n  renderCorrectAnswer() {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase();\n    const evaluate = this.evaluateAnswer();\n    return React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"div\", {\n      className: \"\".concat(evaluate ? 'correct' : 'wrong'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, evaluate ? \"You were correct!\" : \"You were incorrect\"), React.createElement(\"div\", {\n      className: \"quiz-answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, this.state.currentQuestion.answer), React.createElement(\"div\", {\n      className: \"next-question button\",\n      onClick: this.getNextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, \" Next Question \"));\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd ? this.renderFinalScore() : this.state.showAnswer ? this.renderCorrectAnswer() : React.createElement(\"div\", {\n      className: \"quiz-play-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"user-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"form-view\",\n      id: \"add-username-form\",\n      onSubmit: this.getUsername,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"username\",\n      className: \"input-username\",\n      placeholder: \"Please, enter your name here.\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      className: \"button user-btn\",\n      value: \"OK\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"question-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"quiz-question\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, this.state.currentQuestion.question), React.createElement(\"form\", {\n      onSubmit: this.submitGuess,\n      className: \"guess-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      name: \"guess\",\n      className: \"guess-input\",\n      id: \"guess_input\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"submit-guess button\",\n      id: \"guess_btn\",\n      type: \"submit\",\n      value: \"Submit Answer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }))));\n  }\n\n  render() {\n    return this.state.quizCategory ? this.renderPlay() : this.renderPrePlay();\n  }\n\n}\n\nexport default QuizView;","map":{"version":3,"sources":["C:\\Users\\DELL\\Desktop\\Project\\projects\\02_trivia_api\\starter\\frontend\\src\\components\\QuizView.js"],"names":["React","Component","$","questionsPerPlay","QuizView","constructor","props","setDisabled","document","getElementById","disabled","removeDisabled","getUsername","e","preventDefault","ajax","url","type","dataType","contentType","data","JSON","stringify","user_name","state","username","categoryType","quizCategory","xhrFields","withCredentials","crossDomain","success","result","userExit","alert","setState","user_id","querySelector","error","selectCategory","id","getNextQuestion","handleChange","event","target","name","value","previousQuestions","currentQuestion","push","previous_questions","quiz_category","showAnswer","question","guess","forceEnd","updateUserScore","score","numCorrect","length","submitGuess","formatGuess","replace","toLowerCase","evaluate","evaluateAnswer","restartGame","answerArray","answer","split","every","el","includes","categories","componentDidMount","renderPrePlay","Object","keys","map","renderFinalScore","toLocaleUpperCase","renderCorrectAnswer","renderPlay","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,OAAO,6BAAP;AAEA,MAAMC,gBAAgB,GAAG,CAAzB;;AAEA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAC/BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA8BnBC,WA9BmB,GA8BL,MAAM;AAClBC,MAAAA,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,QAAvC,GAAkD,IAAlD;AACAF,MAAAA,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,QAArC,GAAgD,IAAhD;AACD,KAjCkB;;AAAA,SAmCnBC,cAnCmB,GAmCF,MAAM;AACrBH,MAAAA,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,QAAvC,GAAkD,KAAlD;AACAF,MAAAA,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,QAArC,GAAgD,KAAhD;AACD,KAtCkB;;AAAA,SAwCnBE,WAxCmB,GAwCJC,CAAD,IAAO;AACnBA,MAAAA,CAAC,CAACC,cAAF;AACAZ,MAAAA,CAAC,CAACa,IAAF,CAAO;AACLC,QAAAA,GAAG,UADE;AACU;AACfC,QAAAA,IAAI,EAAE,MAFD;AAGLC,QAAAA,QAAQ,EAAE,MAHL;AAILC,QAAAA,WAAW,EAAE,kBAJR;AAKLC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,SAAS,EAAE,KAAKC,KAAL,CAAWC,QADH;AAEnBC,UAAAA,YAAY,EAAE,KAAKF,KAAL,CAAWG;AAFN,SAAf,CALD;AASLC,QAAAA,SAAS,EAAE;AACTC,UAAAA,eAAe,EAAE;AADR,SATN;AAYLC,QAAAA,WAAW,EAAE,IAZR;AAaLC,QAAAA,OAAO,EAAGC,MAAD,IAAY;AACnB,cAAIA,MAAM,CAACC,QAAX,EAAqB,CAEpB;;AACDC,UAAAA,KAAK,CAAC,qDAAD,CAAL;AACA,eAAKC,QAAL,CAAc;AACZC,YAAAA,OAAO,EAAEJ,MAAM,CAACI;AADJ,WAAd;AAGA5B,UAAAA,QAAQ,CAAC6B,aAAT,CAAuB,WAAvB,EAAoC3B,QAApC,GAA+C,IAA/C;AACAF,UAAAA,QAAQ,CAAC6B,aAAT,CAAuB,iBAAvB,EAA0C3B,QAA1C,GAAqD,IAArD;AACD,SAvBI;AAwBL4B,QAAAA,KAAK,EAAGA,KAAD,IAAW;AAChBJ,UAAAA,KAAK,CAAC,4CAAD,CAAL;AACA1B,UAAAA,QAAQ,CAAC6B,aAAT,CAAuB,WAAvB,EAAoC3B,QAApC,GAA+C,KAA/C;AACAF,UAAAA,QAAQ,CAAC6B,aAAT,CAAuB,iBAAvB,EAA0C3B,QAA1C,GAAqD,KAArD;AACD;AA5BI,OAAP;AA8BD,KAxEkB;;AAAA,SA0EnB6B,cA1EmB,GA0EF,CAAC;AAAEtB,MAAAA,IAAF;AAAQuB,MAAAA,EAAE,GAAG;AAAb,KAAD,KAAsB;AACrC,WAAKL,QAAL,CAAc;AAAER,QAAAA,YAAY,EAAE;AAAEV,UAAAA,IAAF;AAAQuB,UAAAA;AAAR;AAAhB,OAAd,EAA8C,KAAKC,eAAnD;AACD,KA5EkB;;AAAA,SA8EnBC,YA9EmB,GA8EHC,KAAD,IAAW;AACxB,WAAKR,QAAL,CAAc;AAAE,SAACQ,KAAK,CAACC,MAAN,CAAaC,IAAd,GAAqBF,KAAK,CAACC,MAAN,CAAaE;AAApC,OAAd;AACD,KAhFkB;;AAAA,SAkFnBL,eAlFmB,GAkFD,MAAM;AACtB,YAAMM,iBAAiB,GAAG,CAAC,GAAG,KAAKvB,KAAL,CAAWuB,iBAAf,CAA1B;;AACA,UAAI,KAAKvB,KAAL,CAAWwB,eAAX,CAA2BR,EAA/B,EAAmC;AAAEO,QAAAA,iBAAiB,CAACE,IAAlB,CAAuB,KAAKzB,KAAL,CAAWwB,eAAX,CAA2BR,EAAlD;AAAuD;;AAE5FtC,MAAAA,CAAC,CAACa,IAAF,CAAO;AACLC,QAAAA,GAAG,EAAE,UADA;AACY;AACjBC,QAAAA,IAAI,EAAE,MAFD;AAGLC,QAAAA,QAAQ,EAAE,MAHL;AAILC,QAAAA,WAAW,EAAE,kBAJR;AAKLC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnB4B,UAAAA,kBAAkB,EAAEH,iBADD;AAEnBI,UAAAA,aAAa,EAAE,KAAK3B,KAAL,CAAWG;AAFP,SAAf,CALD;AASLC,QAAAA,SAAS,EAAE;AACTC,UAAAA,eAAe,EAAE;AADR,SATN;AAYLC,QAAAA,WAAW,EAAE,IAZR;AAaLC,QAAAA,OAAO,EAAGC,MAAD,IAAY;AACnB,eAAKG,QAAL,CAAc;AACZiB,YAAAA,UAAU,EAAE,KADA;AAEZL,YAAAA,iBAAiB,EAAEA,iBAFP;AAGZC,YAAAA,eAAe,EAAEhB,MAAM,CAACqB,QAHZ;AAIZC,YAAAA,KAAK,EAAE,EAJK;AAKZC,YAAAA,QAAQ,EAAEvB,MAAM,CAACqB,QAAP,GAAkB,KAAlB,GAA0B;AALxB,WAAd;AAOA,eAAKG,eAAL,CAAqB,KAAKhC,KAAL,CAAWY,OAAhC;AACD,SAtBI;AAuBLE,QAAAA,KAAK,EAAGA,KAAD,IAAW;AAChBJ,UAAAA,KAAK,CAAC,wDAAD,CAAL;AACD;AAzBI,OAAP;AA2BD,KAjHkB;;AAAA,SAmHnBsB,eAnHmB,GAmHApB,OAAD,IAAa;AAE7BlC,MAAAA,CAAC,CAACa,IAAF,CAAO;AACLC,QAAAA,GAAG,oBAAaoB,OAAb,CADE;AACsB;AAC3BnB,QAAAA,IAAI,EAAE,OAFD;AAGLC,QAAAA,QAAQ,EAAE,MAHL;AAILC,QAAAA,WAAW,EAAE,kBAJR;AAKLC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBmC,UAAAA,KAAK,EAAE,KAAKjC,KAAL,CAAWkC;AADC,SAAf,CALD;AAQL9B,QAAAA,SAAS,EAAE;AACTC,UAAAA,eAAe,EAAE;AADR,SARN;AAWLC,QAAAA,WAAW,EAAE,IAXR;AAYLC,QAAAA,OAAO,EAAGC,MAAD,IAAY;AACnB;AACA,eAAKG,QAAL,CAAc;AACZV,YAAAA,QAAQ,EAAEO,MAAM,CAACT;AADL,WAAd;AAGD,SAjBI;AAkBLe,QAAAA,KAAK,EAAGA,KAAD,IAAW;AAChB,cAAI,KAAKd,KAAL,CAAWuB,iBAAX,CAA6BY,MAA7B,KAAwC,CAA5C,EAA+C;AAAEzB,YAAAA,KAAK,CAAC,iCAAD,CAAL;AAA0C;AAC5F;AApBI,OAAP;AAsBD,KA3IkB;;AAAA,SA8InB0B,WA9ImB,GA8IJjB,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAAC7B,cAAN;AACA,YAAM+C,WAAW,GAAG,KAAKrC,KAAL,CAAW8B,KAAX,CAAiBQ,OAAjB,CAAyB,8BAAzB,EAAyD,EAAzD,EAA6DC,WAA7D,EAApB;AACA,YAAMC,QAAQ,GAAG,KAAKC,cAAL,EAAjB;AACA,WAAK9B,QAAL,CAAc;AACZuB,QAAAA,UAAU,EAAE,CAACM,QAAD,GAAY,KAAKxC,KAAL,CAAWkC,UAAvB,GAAoC,KAAKlC,KAAL,CAAWkC,UAAX,GAAwB,CAD5D;AAEZN,QAAAA,UAAU,EAAE;AAFA,OAAd;AAID,KAtJkB;;AAAA,SAwJnBc,WAxJmB,GAwJL,MAAM;AAClB,WAAK/B,QAAL,CAAc;AACZR,QAAAA,YAAY,EAAE,IADF;AAEZoB,QAAAA,iBAAiB,EAAE,EAFP;AAGZK,QAAAA,UAAU,EAAE,KAHA;AAIZM,QAAAA,UAAU,EAAE,CAJA;AAKZV,QAAAA,eAAe,EAAE,EALL;AAMZM,QAAAA,KAAK,EAAE,EANK;AAOZ7B,QAAAA,QAAQ,EAAE,EAPE;AAQZW,QAAAA,OAAO,EAAE,CARG;AASZmB,QAAAA,QAAQ,EAAE;AATE,OAAd;AAWD,KApKkB;;AAAA,SAqMnBU,cArMmB,GAqMF,MAAM;AACrB,YAAMJ,WAAW,GAAG,KAAKrC,KAAL,CAAW8B,KAAX,CAAiBQ,OAAjB,CAAyB,8BAAzB,EAAyD,EAAzD,EAA6DC,WAA7D,EAApB;AACA,YAAMI,WAAW,GAAG,KAAK3C,KAAL,CAAWwB,eAAX,CAA2BoB,MAA3B,CAAkCL,WAAlC,GAAgDM,KAAhD,CAAsD,GAAtD,CAApB;AACA,aAAOF,WAAW,CAACG,KAAZ,CAAkBC,EAAE,IAAIV,WAAW,CAACW,QAAZ,CAAqBD,EAArB,CAAxB,CAAP;AACD,KAzMkB;;AAEjB,SAAK/C,KAAL,GAAa;AACXG,MAAAA,YAAY,EAAE,IADH;AAEXoB,MAAAA,iBAAiB,EAAE,EAFR;AAGXK,MAAAA,UAAU,EAAE,KAHD;AAIXqB,MAAAA,UAAU,EAAE,EAJD;AAKXf,MAAAA,UAAU,EAAE,CALD;AAMXV,MAAAA,eAAe,EAAE,EANN;AAOXvB,MAAAA,QAAQ,EAAE,EAPC;AAQXW,MAAAA,OAAO,EAAE,CARE;AASXkB,MAAAA,KAAK,EAAE,EATI;AAUXC,MAAAA,QAAQ,EAAE;AAVC,KAAb;AAYD;;AAEDmB,EAAAA,iBAAiB,GAAG;AAClB;AACAxE,IAAAA,CAAC,CAACa,IAAF,CAAO;AACLC,MAAAA,GAAG,eADE;AACe;AACpBC,MAAAA,IAAI,EAAE,KAFD;AAGLc,MAAAA,OAAO,EAAGC,MAAD,IAAY;AACnB,aAAKG,QAAL,CAAc;AAAEsC,UAAAA,UAAU,EAAEzC,MAAM,CAACyC;AAArB,SAAd;AACD,OALI;AAMLnC,MAAAA,KAAK,EAAGA,KAAD,IAAW;AAChBJ,QAAAA,KAAK,CAAC,0DAAD,CAAL;AACD;AARI,KAAP;AAUD;;AA0IDyC,EAAAA,aAAa,GAAG;AACd,WACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,EAEE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAA+B,MAAA,OAAO,EAAE,KAAKpC,cAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEGqC,MAAM,CAACC,IAAP,CAAY,KAAKrD,KAAL,CAAWiD,UAAvB,EAAmCK,GAAnC,CAAuCtC,EAAE,IAAI;AAC5C,aACE;AACE,QAAA,GAAG,EAAEA,EADP;AAEE,QAAA,KAAK,EAAEA,EAFT;AAGE,QAAA,SAAS,EAAC,eAHZ;AAIE,QAAA,OAAO,EAAE,MAAM,KAAKD,cAAL,CAAoB;AAAEtB,UAAAA,IAAI,EAAE,KAAKO,KAAL,CAAWiD,UAAX,CAAsBjC,EAAtB,CAAR;AAAmCA,UAAAA;AAAnC,SAApB,CAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKG,KAAKhB,KAAL,CAAWiD,UAAX,CAAsBjC,EAAtB,CALH,CADF;AASD,KAVA,CAFH,CAFF,CADF;AAmBD;;AAEDuC,EAAAA,gBAAgB,GAAG;AACjB,WACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAmC,KAAKvD,KAAL,CAAWC,QAAX,GAAsB,KAAKD,KAAL,CAAWC,QAAX,CAAoBuD,iBAApB,KAA0C,IAAhE,GAAuE,EAA1G,2BAAoI,KAAKxD,KAAL,CAAWkC,UAA/I,CADF,EAEE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAmC,MAAA,OAAO,EAAE,KAAKQ,WAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFF,CADF;AAMD;;AAQDe,EAAAA,mBAAmB,GAAG;AACpB,UAAMpB,WAAW,GAAG,KAAKrC,KAAL,CAAW8B,KAAX,CAAiBQ,OAAjB,CAAyB,8BAAzB,EAAyD,EAAzD,EAA6DC,WAA7D,EAApB;AACA,UAAMC,QAAQ,GAAG,KAAKC,cAAL,EAAjB;AACA,WACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgC,KAAKzC,KAAL,CAAWwB,eAAX,CAA2BK,QAA3D,CADF,EAEE;AAAK,MAAA,SAAS,YAAKW,QAAQ,GAAG,SAAH,GAAe,OAA5B,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsDA,QAAQ,GAAG,mBAAH,GAAyB,oBAAvF,CAFF,EAGE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA8B,KAAKxC,KAAL,CAAWwB,eAAX,CAA2BoB,MAAzD,CAHF,EAIE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAsC,MAAA,OAAO,EAAE,KAAK3B,eAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAJF,CADF;AAQD;;AAEDyC,EAAAA,UAAU,GAAG;AACX,WAAO,KAAK1D,KAAL,CAAWuB,iBAAX,CAA6BY,MAA7B,KAAwCxD,gBAAxC,IAA4D,KAAKqB,KAAL,CAAW+B,QAAvE,GACH,KAAKwB,gBAAL,EADG,GAEH,KAAKvD,KAAL,CAAW4B,UAAX,GACE,KAAK6B,mBAAL,EADF,GAGE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAM,MAAA,SAAS,EAAC,WAAhB;AAA4B,MAAA,EAAE,EAAC,mBAA/B;AAAmD,MAAA,QAAQ,EAAE,KAAKrE,WAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,UAAxB;AAAmC,MAAA,SAAS,EAAC,gBAA7C;AAA8D,MAAA,WAAW,EAAC,+BAA1E;AAA0G,MAAA,QAAQ,EAAE,KAAK8B,YAAzH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,EAIE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,SAAS,EAAC,iBAA/B;AAAiD,MAAA,KAAK,EAAC,IAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF,CADF,EASE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgC,KAAKlB,KAAL,CAAWwB,eAAX,CAA2BK,QAA3D,CADF,EAEE;AAAM,MAAA,QAAQ,EAAE,KAAKO,WAArB;AAAkC,MAAA,SAAS,EAAC,YAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAgC,MAAA,SAAS,EAAC,aAA1C;AAAwD,MAAA,EAAE,EAAC,aAA3D;AAAyE,MAAA,QAAQ,EAAE,KAAKlB,YAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAO,MAAA,SAAS,EAAC,qBAAjB;AAAuC,MAAA,EAAE,EAAC,WAA1C;AAAsD,MAAA,IAAI,EAAC,QAA3D;AAAoE,MAAA,KAAK,EAAC,eAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAFF,CATF,CALN;AAuBD;;AAGDyC,EAAAA,MAAM,GAAG;AACP,WAAO,KAAK3D,KAAL,CAAWG,YAAX,GACH,KAAKuD,UAAL,EADG,GAEH,KAAKP,aAAL,EAFJ;AAGD;;AAxP8B;;AA2PjC,eAAevE,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport $ from 'jquery';\n\nimport '../stylesheets/QuizView.css';\n\nconst questionsPerPlay = 5;\n\nclass QuizView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      categories: {},\n      numCorrect: 0,\n      currentQuestion: {},\n      username: '',\n      user_id: 0,\n      guess: '',\n      forceEnd: false\n    }\n  }\n\n  componentDidMount() {\n    // this.setDisabled()\n    $.ajax({\n      url: `/categories`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({ categories: result.categories })\n      },\n      error: (error) => {\n        alert('Unable to load categories. Please try your request again')\n      }\n    })\n  }\n\n  setDisabled = () => {\n    document.getElementById(\"guess_input\").disabled = true;\n    document.getElementById(\"guess_btn\").disabled = true;\n  }\n\n  removeDisabled = () => {\n    document.getElementById(\"guess_input\").disabled = false;\n    document.getElementById(\"guess_btn\").disabled = false;\n  }\n\n  getUsername = (e) => {\n    e.preventDefault()\n    $.ajax({\n      url: `/users`, //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        user_name: this.state.username,\n        categoryType: this.state.quizCategory\n      }),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        if (result.userExit) {\n          \n        }\n        alert('Created successfully! Go ahead and enjoy your play.')\n        this.setState({\n          user_id: result.user_id\n        });\n        document.querySelector(\".user-btn\").disabled = true\n        document.querySelector(\".input-username\").disabled = true\n      },\n      error: (error) => {\n        alert('Unable to save your name. Please try again')\n        document.querySelector(\".user-btn\").disabled = false\n        document.querySelector(\".input-username\").disabled = false\n      }\n    })\n  }\n\n  selectCategory = ({ type, id = 0 }) => {\n    this.setState({ quizCategory: { type, id } }, this.getNextQuestion)\n  }\n\n  handleChange = (event) => {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  getNextQuestion = () => {\n    const previousQuestions = [...this.state.previousQuestions]\n    if (this.state.currentQuestion.id) { previousQuestions.push(this.state.currentQuestion.id) }\n\n    $.ajax({\n      url: '/quizzes', //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        previous_questions: previousQuestions,\n        quiz_category: this.state.quizCategory\n      }),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          showAnswer: false,\n          previousQuestions: previousQuestions,\n          currentQuestion: result.question,\n          guess: '',\n          forceEnd: result.question ? false : true\n        });\n        this.updateUserScore(this.state.user_id)\n      },\n      error: (error) => {\n        alert('Unable to load question. Please try your request again')\n      }\n    })\n  }\n\n  updateUserScore = (user_id) => {\n\n    $.ajax({\n      url: `/scores/${user_id}`, //TODO: update request URL\n      type: \"PATCH\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({\n        score: this.state.numCorrect\n      }),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        // alert('Score successfully updated.')\n        this.setState({\n          username: result.user_name\n        })\n      },\n      error: (error) => {\n        if (this.state.previousQuestions.length !== 0) { alert('Unable to update user\\'s score.') }\n      }\n    })\n  }\n\n\n  submitGuess = (event) => {\n    event.preventDefault();\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\n    const evaluate = this.evaluateAnswer()\n    this.setState({\n      numCorrect: !evaluate ? this.state.numCorrect : this.state.numCorrect + 1,\n      showAnswer: true\n    })\n  }\n\n  restartGame = () => {\n    this.setState({\n      quizCategory: null,\n      previousQuestions: [],\n      showAnswer: false,\n      numCorrect: 0,\n      currentQuestion: {},\n      guess: '',\n      username: \"\",\n      user_id: 0,\n      forceEnd: false\n    })\n  }\n\n  renderPrePlay() {\n    return (\n      <div className=\"quiz-play-holder\">\n        <div className=\"choose-header\">Choose Category</div>\n        <div className=\"category-holder\">\n          <div className=\"play-category\" onClick={this.selectCategory}>ALL</div>\n          {Object.keys(this.state.categories).map(id => {\n            return (\n              <div\n                key={id}\n                value={id}\n                className=\"play-category\"\n                onClick={() => this.selectCategory({ type: this.state.categories[id], id })}>\n                {this.state.categories[id]}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n\n  renderFinalScore() {\n    return (\n      <div className=\"quiz-play-holder\">\n        <div className=\"final-header\"> {`${this.state.username ? this.state.username.toLocaleUpperCase() + ', ' : \"\"}`}Your Final Score is {this.state.numCorrect}</div>\n        <div className=\"play-again button\" onClick={this.restartGame}> Play Again? </div>\n      </div>\n    )\n  }\n\n  evaluateAnswer = () => {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\n    const answerArray = this.state.currentQuestion.answer.toLowerCase().split(' ');\n    return answerArray.every(el => formatGuess.includes(el));\n  }\n\n  renderCorrectAnswer() {\n    const formatGuess = this.state.guess.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\").toLowerCase()\n    const evaluate = this.evaluateAnswer()\n    return (\n      <div className=\"quiz-play-holder\">\n        <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n        <div className={`${evaluate ? 'correct' : 'wrong'}`}>{evaluate ? \"You were correct!\" : \"You were incorrect\"}</div>\n        <div className=\"quiz-answer\">{this.state.currentQuestion.answer}</div>\n        <div className=\"next-question button\" onClick={this.getNextQuestion}> Next Question </div>\n      </div>\n    )\n  }\n\n  renderPlay() {\n    return this.state.previousQuestions.length === questionsPerPlay || this.state.forceEnd\n      ? this.renderFinalScore()\n      : this.state.showAnswer\n        ? this.renderCorrectAnswer()\n        : (\n          <div className=\"quiz-play-holder\">\n            <div id=\"user-info\">\n              <form className=\"form-view\" id=\"add-username-form\" onSubmit={this.getUsername}>\n                <label>\n                  <input type=\"text\" name=\"username\" className='input-username' placeholder='Please, enter your name here.' onChange={this.handleChange} />\n                </label>\n                <input type=\"submit\" className=\"button user-btn\" value=\"OK\" />\n              </form>\n            </div>\n            <div className=\"question-block\">\n              <div className=\"quiz-question\">{this.state.currentQuestion.question}</div>\n              <form onSubmit={this.submitGuess} className=\"guess-form\">\n                <input type=\"text\" name=\"guess\" className=\"guess-input\" id='guess_input' onChange={this.handleChange} />\n                <input className=\"submit-guess button\" id='guess_btn' type=\"submit\" value=\"Submit Answer\" />\n              </form>\n            </div>\n          </div>\n        )\n  }\n\n\n  render() {\n    return this.state.quizCategory\n      ? this.renderPlay()\n      : this.renderPrePlay()\n  }\n}\n\nexport default QuizView;\n"]},"metadata":{},"sourceType":"module"}